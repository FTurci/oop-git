{"title":"Version control with `git`","markdown":{"yaml":{"title":"Version control with `git`","format":{"revealjs":{"width":1200,"height":800,"scrollable":true,"auto-stretch":false,"lazy-load":false,"slide-level":3,"smaller":true,"theme":["simple","custom.scss"]},"html":{"output-file":"git.html"}},"output-file":"git-slides.html"},"headingText":"Aims","containsRefs":false,"markdown":"\n\n\n\n- Initialise a local `git` repository\n- Add files to track\n- Commit some changes\n\n## Learning outcomes\n\n- Understand the general principles of version control\n- Mastery of how `git` implements the main features of version control\n\n\n## General ideas about version control\n\nVersion control is an approach to coding that allows you to keep track of the code **evolution**.\n\nYou may think of coding as a linear process, where a first version is followed by another more advanced version, which is again followed by a successive more refined version and so on.\n```{mermaid}\nflowchart LR\n    A[Version 1] -->  B[Version 2] --> C[Version 3]--> D[...]\n```\n\nThis is not at all the case. In fact, as we develop our code we tyically **try various ideas**, similarly to what you would do if you were writing a novel, perform an experiment, or explore an uncharted territory. \n```{mermaid}\nflowchart LR\n    A[Version 1] --> B\n    B[Version 2] --> C[Version 3]--> D[...]\n    A-->Aa[Variant 1.a]-->B\n    A-->Ab[Variant 1.b]-->E[Alternative version 2]-->C\n```\n\n### \n\nThis is even more evident when **collaboration** is at play: different developers will try different approaches and require a system to keep track of their respective modifications and that helps them with bringing them together into a unified project. In fact, regularly, the various ideas need to come together and **merge** for the project to keep its unitary structure.\n\nVersion control tools serve precisely this purpose, and `git` is the most popular of such tools.\n\nIt is powerful, but its usage can be subtle at times, as illustrated by the following cartoon:\n\n![Git according to the celebrated comic strip [xkcd](https://xkcd.com)](https://imgs.xkcd.com/comics/git_2x.png){fig-align=\"left\" width=40%}\n\nVersion control therefore solves two problems:\n\n1. keeping track of the code changes performed by a **single performs**\n2. allow to harmonise and synchronise the code changes of various **collaborators**\n\nWe are going to focus mostly on the first part, but it is important to realise that `git` is an **essential** tool for code development in large projects. \n\n## Terminology\n\n### Repositories \n\nVersion control use **repositories**. These are a database of code versions, stored in an efficient manner, focusing on the **changes** between a version and another.\n\n### Clones  \n\nEach user of the repository has their own working copy of all the files (any kinds of files) of the project. This **clone** of the repository is typically stored on the local machine.\n\nChanges to the local clone are not reflected in the repository unless the users **explicitly** require this to be the case. \n\n### Distributed version control  \n\nIn **distribute version control** each user has a complete copy of the repository, and they can perform their changes independently from other users, work locally and offline and eventually do collaborative work by merging their own versions with the one of others. \n\nIn principle, this can be done **without a central server** (e.g. peer to peer). In practice, one often uses some form of online repository, e.g. Github, Gitlab etc.\n\n###  Branch  \n\nBranching in `git` allow you to explore various ideas in parallel, developing in different directions and experimenting new features.\nBranching is a backbone ides in `git`.\n\nA repository typically has a **main branch** where the functional code is stored. When we want to develop our code we create new **feature branches** \n\n```{mermaid}\n    %%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {\n              'git0': '#ff0000',\n              'git1': '#00ff00',\n              'git2': '#0000ff',\n              'git3': '#ff00ff',\n              'git4': '#00ffff',\n              'git5': '#ffff00',\n              'git6': '#ff00ff',\n              'git7': '#00ffff'\n       } } }%%\ngitGraph\n   commit id: \"main\"\n   branch feature\n   commit id: \"main work\"\n   checkout feature\n   commit id: \"feature work\"\n   checkout main\n   commit id: \"more main work\"\n   merge feature\n```\n\nOn every branch, we can store out individual advancements as **commits** (see below). Eventually, when we are happy for our feature to be integrated with the main branche, we **merge** the feature branch with the main branch. \n\n\n### Commits  \n\nWhen you want a change to be registered in the repository's database, your **commit** your changes to the repository. This means that a new entry in the database is added, keeping track of a timestamp associated with your changes and (often) an explanatory description of what the modification entails.\n\n### Pushing [with the remote repository only]\n\nIf you also have a remote repository (e.g. on GitHub), you can synchronise the changes between the local branch and the remote branch via the **push** operation.\n\n### Fetching [with the remote repository only]\n\nFetch allows you to retrieve the changes from a remote repository, see them and decide whether to merge such changes with your local repository (or not).\n\n### Pulling [with the remote repository only]\n\nPulling is simply fetching, followed by automatic merging.\n\n### Bundling\n\nAn efficient way to produce a package out of a `git` repository is to construct a **bundle**. This is a single file that contains a collection of commits, branches and logs allowing you to transfer or store the repository's content without requiring access to a remote server.\n\n### Scheme\n\n![How `git` works, adapted from [https://homes.cs.washington.edu/~mernst/advice/version-control.html ↗️](https://homes.cs.washington.edu/~mernst/advice/version-control.html#Introduction_to_version_control) ](../img/gitscheme.svg){width=80%}\n\n## Hands-on approach to `git`\nWe start off working **locally** and creating a local project.\n\n\n## To-dos\n\n[Previously](shell.qmd#to-dos), you should have created a project folder with a `README.md` file. We now want to setup our **local** git repository.\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 1: initialise the repository\n\nGo to the project folder `vicsek-cpp` and **initialise the `git` repository**.\n\nUse the information above or `git --help` to find the correct command to use.\n\n:::\n\n### \n:::{.callout-note icon=\"false\"}\n## Task 2: create a `.gitignore` file and add it to the staging area\n\nWe want to tell `git` not to keep track of specifc files. For, example we want to ignore hidden files that are specific to MacOS. A **hidden file/folder** haas a name that starts with `.` . \n\nTo provide `git` with a list of files to ignore, we create a (hidden) configuration file inside `vicsek-cpp` called `.gitignore`. \n\nCreate such file and enter the following string\n\n```.DS_Store```\n\nThen **add** the `.gitignore` file to the staging area. \n\nCheck `git status` to see if your `.gitignore` is ready to be committed and then **commit** it with a suitable comment.  \n\nYou should also get a message concerning your `README.md` file. What os the best course of action here?\n \n:::\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 3: ignoring files and directly committing the changes\n\nSuppose now that we also want to ignore all files that end with `.txt`. The `.gitignore` file accepts the wildcard `*`.\n\nModify the `.gitignore` to ignore all `.txt` files. With a suitable option  to the `git commit` command, stage and commit the changes in a single go.\n\nThen create two new files:\n\n- a `notes.txt` file \n- a `notes.md` file\n\nAdd all new files in the current folder with `git add .`, commit your changes to the repository and then check the files added to the repository with `git ls-files`. \n\nIs `notes.txt` in your list?\n\n\n:::\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 4: branching\n\nWe want to now start developing our code. For this purpose, we create a new branch called `develop`.  To do so we use the command\n\n\n```bash\ngit branch develop\n```\n\nTo check which branches now exist in your repository just type\n\n```bash\ngit branch\n```\n\nA `*` should appear on the branch you are on (which should be `main`). You leave the view using the`Q` key on your keyboard. \n\nTo switch to the `develop` branch use\n\n```bash\ngit checkout develop\n```\nCheck that you are on the right branch now (see above).\n\nOnce you are on your develop branch, create a new folder `src` where we will put the C++ code (do not remember how to create a folder? go back to [Using the shell](shell.qmd)).\n\nInside `src`, create our C++ main file `main.cpp`, e.g. using a suitable editor (e.g. `nano` , `pico` or `vim`).\n\nThe minimal content should be the following\n\n\n```c++\n#include <iostream>\n\nint main(){\n    return 0\n}\n\n```\n \n Now, add the src folder with its content to the git repository and commit the changes.\n\n Switch back to the `main` branch: what happened to the `src` folder?\n\n:::\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 4: merging\n\nNow that you have your `develop` branch set up, attempt to merge it back with the  `main` branch using the `git merge` command. If you are not sure about how to use it, check the documentation with `git merge --help`.\n\n:::\n\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 5: bundling\n\nUse now the command \n\n```bash\ngit bundle create myrepo.bundle --all\n```\nto create a single bundle file conatining all of the repository. Move it to another folder (or even another machine with git, e.g. your Noteable account) and unpack it with \n\n```bash\ngit clone myrepo.bundle\n```\n\nCan you check the branch structure? and the status?\n\n:::","srcMarkdownNoYaml":"\n\n\n## Aims\n\n- Initialise a local `git` repository\n- Add files to track\n- Commit some changes\n\n## Learning outcomes\n\n- Understand the general principles of version control\n- Mastery of how `git` implements the main features of version control\n\n\n## General ideas about version control\n\nVersion control is an approach to coding that allows you to keep track of the code **evolution**.\n\nYou may think of coding as a linear process, where a first version is followed by another more advanced version, which is again followed by a successive more refined version and so on.\n```{mermaid}\nflowchart LR\n    A[Version 1] -->  B[Version 2] --> C[Version 3]--> D[...]\n```\n\nThis is not at all the case. In fact, as we develop our code we tyically **try various ideas**, similarly to what you would do if you were writing a novel, perform an experiment, or explore an uncharted territory. \n```{mermaid}\nflowchart LR\n    A[Version 1] --> B\n    B[Version 2] --> C[Version 3]--> D[...]\n    A-->Aa[Variant 1.a]-->B\n    A-->Ab[Variant 1.b]-->E[Alternative version 2]-->C\n```\n\n### \n\nThis is even more evident when **collaboration** is at play: different developers will try different approaches and require a system to keep track of their respective modifications and that helps them with bringing them together into a unified project. In fact, regularly, the various ideas need to come together and **merge** for the project to keep its unitary structure.\n\nVersion control tools serve precisely this purpose, and `git` is the most popular of such tools.\n\nIt is powerful, but its usage can be subtle at times, as illustrated by the following cartoon:\n\n![Git according to the celebrated comic strip [xkcd](https://xkcd.com)](https://imgs.xkcd.com/comics/git_2x.png){fig-align=\"left\" width=40%}\n\nVersion control therefore solves two problems:\n\n1. keeping track of the code changes performed by a **single performs**\n2. allow to harmonise and synchronise the code changes of various **collaborators**\n\nWe are going to focus mostly on the first part, but it is important to realise that `git` is an **essential** tool for code development in large projects. \n\n## Terminology\n\n### Repositories \n\nVersion control use **repositories**. These are a database of code versions, stored in an efficient manner, focusing on the **changes** between a version and another.\n\n### Clones  \n\nEach user of the repository has their own working copy of all the files (any kinds of files) of the project. This **clone** of the repository is typically stored on the local machine.\n\nChanges to the local clone are not reflected in the repository unless the users **explicitly** require this to be the case. \n\n### Distributed version control  \n\nIn **distribute version control** each user has a complete copy of the repository, and they can perform their changes independently from other users, work locally and offline and eventually do collaborative work by merging their own versions with the one of others. \n\nIn principle, this can be done **without a central server** (e.g. peer to peer). In practice, one often uses some form of online repository, e.g. Github, Gitlab etc.\n\n###  Branch  \n\nBranching in `git` allow you to explore various ideas in parallel, developing in different directions and experimenting new features.\nBranching is a backbone ides in `git`.\n\nA repository typically has a **main branch** where the functional code is stored. When we want to develop our code we create new **feature branches** \n\n```{mermaid}\n    %%{init: { 'logLevel': 'debug', 'theme': 'default' , 'themeVariables': {\n              'git0': '#ff0000',\n              'git1': '#00ff00',\n              'git2': '#0000ff',\n              'git3': '#ff00ff',\n              'git4': '#00ffff',\n              'git5': '#ffff00',\n              'git6': '#ff00ff',\n              'git7': '#00ffff'\n       } } }%%\ngitGraph\n   commit id: \"main\"\n   branch feature\n   commit id: \"main work\"\n   checkout feature\n   commit id: \"feature work\"\n   checkout main\n   commit id: \"more main work\"\n   merge feature\n```\n\nOn every branch, we can store out individual advancements as **commits** (see below). Eventually, when we are happy for our feature to be integrated with the main branche, we **merge** the feature branch with the main branch. \n\n\n### Commits  \n\nWhen you want a change to be registered in the repository's database, your **commit** your changes to the repository. This means that a new entry in the database is added, keeping track of a timestamp associated with your changes and (often) an explanatory description of what the modification entails.\n\n### Pushing [with the remote repository only]\n\nIf you also have a remote repository (e.g. on GitHub), you can synchronise the changes between the local branch and the remote branch via the **push** operation.\n\n### Fetching [with the remote repository only]\n\nFetch allows you to retrieve the changes from a remote repository, see them and decide whether to merge such changes with your local repository (or not).\n\n### Pulling [with the remote repository only]\n\nPulling is simply fetching, followed by automatic merging.\n\n### Bundling\n\nAn efficient way to produce a package out of a `git` repository is to construct a **bundle**. This is a single file that contains a collection of commits, branches and logs allowing you to transfer or store the repository's content without requiring access to a remote server.\n\n### Scheme\n\n![How `git` works, adapted from [https://homes.cs.washington.edu/~mernst/advice/version-control.html ↗️](https://homes.cs.washington.edu/~mernst/advice/version-control.html#Introduction_to_version_control) ](../img/gitscheme.svg){width=80%}\n\n## Hands-on approach to `git`\nWe start off working **locally** and creating a local project.\n\n\n## To-dos\n\n[Previously](shell.qmd#to-dos), you should have created a project folder with a `README.md` file. We now want to setup our **local** git repository.\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 1: initialise the repository\n\nGo to the project folder `vicsek-cpp` and **initialise the `git` repository**.\n\nUse the information above or `git --help` to find the correct command to use.\n\n:::\n\n### \n:::{.callout-note icon=\"false\"}\n## Task 2: create a `.gitignore` file and add it to the staging area\n\nWe want to tell `git` not to keep track of specifc files. For, example we want to ignore hidden files that are specific to MacOS. A **hidden file/folder** haas a name that starts with `.` . \n\nTo provide `git` with a list of files to ignore, we create a (hidden) configuration file inside `vicsek-cpp` called `.gitignore`. \n\nCreate such file and enter the following string\n\n```.DS_Store```\n\nThen **add** the `.gitignore` file to the staging area. \n\nCheck `git status` to see if your `.gitignore` is ready to be committed and then **commit** it with a suitable comment.  \n\nYou should also get a message concerning your `README.md` file. What os the best course of action here?\n \n:::\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 3: ignoring files and directly committing the changes\n\nSuppose now that we also want to ignore all files that end with `.txt`. The `.gitignore` file accepts the wildcard `*`.\n\nModify the `.gitignore` to ignore all `.txt` files. With a suitable option  to the `git commit` command, stage and commit the changes in a single go.\n\nThen create two new files:\n\n- a `notes.txt` file \n- a `notes.md` file\n\nAdd all new files in the current folder with `git add .`, commit your changes to the repository and then check the files added to the repository with `git ls-files`. \n\nIs `notes.txt` in your list?\n\n\n:::\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 4: branching\n\nWe want to now start developing our code. For this purpose, we create a new branch called `develop`.  To do so we use the command\n\n\n```bash\ngit branch develop\n```\n\nTo check which branches now exist in your repository just type\n\n```bash\ngit branch\n```\n\nA `*` should appear on the branch you are on (which should be `main`). You leave the view using the`Q` key on your keyboard. \n\nTo switch to the `develop` branch use\n\n```bash\ngit checkout develop\n```\nCheck that you are on the right branch now (see above).\n\nOnce you are on your develop branch, create a new folder `src` where we will put the C++ code (do not remember how to create a folder? go back to [Using the shell](shell.qmd)).\n\nInside `src`, create our C++ main file `main.cpp`, e.g. using a suitable editor (e.g. `nano` , `pico` or `vim`).\n\nThe minimal content should be the following\n\n\n```c++\n#include <iostream>\n\nint main(){\n    return 0\n}\n\n```\n \n Now, add the src folder with its content to the git repository and commit the changes.\n\n Switch back to the `main` branch: what happened to the `src` folder?\n\n:::\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 4: merging\n\nNow that you have your `develop` branch set up, attempt to merge it back with the  `main` branch using the `git merge` command. If you are not sure about how to use it, check the documentation with `git merge --help`.\n\n:::\n\n\n###\n:::{.callout-note icon=\"false\"}\n## Task 5: bundling\n\nUse now the command \n\n```bash\ngit bundle create myrepo.bundle --all\n```\nto create a single bundle file conatining all of the repository. Move it to another folder (or even another machine with git, e.g. your Noteable account) and unpack it with \n\n```bash\ngit clone myrepo.bundle\n```\n\nCan you check the branch structure? and the status?\n\n:::"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":3,"to":"revealjs","output-file":"git-slides.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.5.45","auto-stretch":false,"title":"Version control with `git`","width":1200,"height":800,"scrollable":true,"lazy-load":false,"smaller":true,"theme":["simple","custom.scss"]}},"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"output-file":"git.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.45","theme":"cosmo","grid":{"sidebar-width":"305px"},"number-chapters":true,"title":"Version control with `git`"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}